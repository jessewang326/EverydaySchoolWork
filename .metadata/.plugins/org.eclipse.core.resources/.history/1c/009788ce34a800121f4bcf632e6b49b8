import java.util.Iterator;
public class LinkedBinaryTree2<T> implements BinaryTreeADT {
	protected int count;
	protected BinaryTreeNode<T> root;
	
	public LinkedBinaryTree2(){
		count = 0;
		root = null;
	}

	public LinkedBinaryTree2(T element){
		count = 1;
		root = new BinaryTreeNode<T>(element);
	}
	
	
	public T getRoot() throws EmptyCollectionException{
		return root.getElement();
	}
	
	public boolean isEmpty(){
		return count==0;
	}
	
	public int size(){
		return count;
	}
	
	public boolean contains (T targetElement){
		if (findAgain(targetElement,root) == null)
			return false;
		else
			return true;
	}

	
	public T find (T targetElement) throws ElementNotFoundException {
		BinaryTreeNode<T> current = findAgain(targetElement, root);
		if (current == null)
			throw new ElementNotFoundException;
		else
		return (current.getElement());
		
		
	}
	
	public BinaryTreeNode<T> findAgain(T targetElement, BinaryTreeNode<T> next){
		if (next == null)
			return null;
		
		if (next.getElement().equals(targetElement))
			return next;
		
		BinaryTreeNode<T> temp = findAgain(targetElement, next.getLeft());
		if (temp == null)
		findAgain(targetElement, next.getRight());
		
		return temp;
		
	}
	
}
